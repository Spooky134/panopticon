services:
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "80:80"
      - "443:443"  # если нужен HTTPS
    depends_on:
      - panopticon
      - vstream_service
    volumes:
      # - panopticon_static:/var/www/static  # статика Django
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - mainnet
  panopticon:
    build:
      context: .
      dockerfile: panopticon/Dockerfile
    container_name: panopticon
    expose:
      - ${PANOPTICON_PORT}
    env_file: .env
    environment:
      - PANOPTICON_NAME=${PANOPTICON_NAME}
      
      - VSTREAM_SERVICE_URL=${VSTREAM_SERVICE_HOST}:${VSTREAM_SERVICE_PORT}
      - VSTREAM_SERVICE_HOST=${VSTREAM_SERVICE_HOST}
      
      - TURN_URL=turn:${EXTERNAL_IP}:${TURN_PORT}
      - TURN_USERNAME=${TURN_USERNAME}
      - TURN_PASSWORD=${TURN_PASSWORD}

      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD${POSTGRES_PASSWORD}
    volumes:
      - ./panopticon/panopticon:/app
      # - panopticon_static:/app/staticfiles 
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      - database
    networks:
      - mainnet
    restart: unless-stopped
  vstream_service:
    build:
      context: .
      dockerfile: vstream_service/Dockerfile
    container_name: vstream_service
    # ports:
    #   - "${VSTREAM_SERVICE_PORT}:8000"                # signaling REST
    expose:
      - ${VSTREAM_SERVICE_HOST}
    env_file: .env
    environment:
      - VSTREAM_SERVICE_NAME=${VSTREAM_SERVICE_NAME}
      - VSTREAM_SERVICE_SECRET_KEY=${VSTREAM_SERVICE_SECRET_KEY}
      - VSTREAM_SERVICE_ALGORITHM=${VSTREAM_SERVICE_ALGORITHM}
      - VSTREAM_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES=${VSTREAM_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES}
      - VSTREAM_CORS_ALLOWED_ORIGINS=${VSTREAM_CORS_ALLOWED_ORIGINS}
      - VSTREAM_DEBUG=${VSTREAM_DEBUG}

      - ML_SERVICE_HOST=${ML_SERVICE_HOST}
      - ML_SERVICE_PORT=${ML_SERVICE_PORT}

      - TURN_URL=turn:${EXTERNAL_IP}:${TURN_PORT}
      - TURN_USERNAME=${TURN_USERNAME}
      - TURN_PASSWORD=${TURN_PASSWORD}

      - S3_ENDPOINT_URL=${S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
    depends_on:
      - ml_service
      - coturn
    networks:
      - mainnet

  ml_service:
    build:
      context: .  # ← КОРЕНЬ проекта (где лежит proto/)
      dockerfile: ml_service/Dockerfile
    container_name: ml_service
    env_file: .env
    environment:
      - ML_SERVICE_HOST=${ML_SERVICE_HOST}
      - ML_SERVICE_PORT=${ML_SERVICE_PORT}
    expose:
      - "${ML_SERVICE_PORT}"
    # ports:   
    #   - "50051:50051"               # доступен внутри сети
    networks:
      - mainnet

  coturn:
    image: instrumentisto/coturn
    container_name: coturn
    restart: always
    ports:
      - "3478:3478/udp"            # STUN/TURN discovery
      - "5349:5349/tcp"            # TURN over TLS (fallback)
    command: >
      --no-cli
      --lt-cred-mech
      --user user:pass
      --realm webrtc.local
      --external-ip=${EXTERNAL_IP}
      --no-tls
      --no-dtls
      --log-file=stdout
    networks:
      - mainnet

  database:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    # ports:
    #   - "${POSTGRES_PORT}:5432"
    expose:
      - ${POSTGRES_PORT}
    networks:
      - mainnet
  # minio:
  #   image: minio/minio
  #   container_name: minio
  #   ports:
  #     - "9000:9000"  # S3 API
  #     - "9001:9001"  # Веб-консоль
  #   environment:
  #     MINIO_ROOT_USER: minioadmin
  #     MINIO_ROOT_PASSWORD: minioadmin
  #   volumes:
  #     - minio_data:/data  # Постоянное хранилище данных
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - webrtcnet

#   minio:
#     image: minio/minio
#     container_name: minio
#     ports:
#       - "9000:9000"
#       - "9001:9001"
#     environment:
#       MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
#       MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
#     volumes:
#       - minio_data:/data
#     command: server /data --console-address ":9001"
#     networks:
#       - webrtcnet
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
#       interval: 30s
#       timeout: 20s
#       retries: 3

#   minio-init:
#     image: minio/mc
#     container_name: minio-init
#     depends_on:
#       minio:
#         condition: service_healthy
#     environment:
#       - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
#       - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
#       - S3_BUCKET=${S3_BUCKET}
#     entrypoint: >
#       /bin/sh -c "
#       until (/usr/bin/mc alias set myminio http://minio:9000 $${AWS_ACCESS_KEY_ID} $${AWS_SECRET_ACCESS_KEY}) do echo 'Waiting for minio...' && sleep 1; done;
#       /usr/bin/mc mb myminio/$${S3_BUCKET} || true;
#       echo 'Bucket $$S3_BUCKET created or already exists';
#       "
#     networks:
#       - webrtcnet

# volumes:
#   minio_data:
# volumes:
#   panopticon_static:
volumes:
  postgres_data:


networks:
  mainnet:
    driver: bridge
