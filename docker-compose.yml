services:
  gateway:
    build:
      context: .
      dockerfile: gateway/Dockerfile
    container_name: gateway
    ports:
      - "80:80"
      - "443:443" #https
    depends_on:
      - panopticon
      - vstream_service
    volumes:
      # - panopticon_static:/var/www/static  # статика Django
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - mainnet
  panopticon:
    build:
      context: .
      dockerfile: panopticon/Dockerfile
    container_name: panopticon
    env_file: .env
    environment:
      - PANOPTICON_NAME=${PANOPTICON_NAME}
      
      - VSTREAM_SERVICE_URL=${VSTREAM_SERVICE_HOST}:${VSTREAM_SERVICE_PORT}
      - VSTREAM_SERVICE_HOST=${VSTREAM_SERVICE_HOST}
      
      - TURN_URL=turn:${EXTERNAL_IP}:${TURN_PORT}
      - TURN_USERNAME=${TURN_USERNAME}
      - TURN_PASSWORD=${TURN_PASSWORD}

      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD${POSTGRES_PASSWORD}
    volumes:
      - ./panopticon/panopticon:/app
      - ./panopticon/static:/app/staticfiles 
    depends_on:
      - database
    expose:
      - ${PANOPTICON_PORT}
    command: python manage.py runserver 0.0.0.0:${PANOPTICON_PORT}
    networks:
      - mainnet
    restart: unless-stopped
  vstream_service:
    build:
      context: .
      dockerfile: vstream_service/Dockerfile
    container_name: vstream_service
    env_file: .env
    environment:
      - VSTREAM_SERVICE_NAME=${VSTREAM_SERVICE_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - VSTREAM_SERVICE_ALGORITHM=${VSTREAM_SERVICE_ALGORITHM}
      - VSTREAM_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES=${VSTREAM_SERVICE_ACCESS_TOKEN_EXPIRE_MINUTES}
      - VSTREAM_CORS_ALLOWED_ORIGINS=${VSTREAM_CORS_ALLOWED_ORIGINS}
      - VSTREAM_DEBUG=${VSTREAM_DEBUG}

      - ML_SERVICE_HOST=${ML_SERVICE_HOST}
      - ML_SERVICE_PORT=${ML_SERVICE_PORT}

      - TURN_URL=turn:${EXTERNAL_IP}:${TURN_PORT}
      - TURN_USERNAME=${TURN_USERNAME}
      - TURN_PASSWORD=${TURN_PASSWORD}

      - S3_ENDPOINT_URL=http://${S3_HOST}:${S3_PORT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_REGION=${S3_REGION}
    depends_on:
      - ml_service
      - coturn
      - storage
    expose:
      - ${VSTREAM_SERVICE_PORT}
    command: uvicorn main:app --host 0.0.0.0 --port ${VSTREAM_SERVICE_PORT}
    networks:
      - mainnet

  ml_service:
    build:
      context: .
      dockerfile: ml_service/Dockerfile
    container_name: ml_service
    env_file: .env
    environment:
      - ML_SERVICE_HOST=${ML_SERVICE_HOST}
      - ML_SERVICE_PORT=${ML_SERVICE_PORT}
    expose:
      - "${ML_SERVICE_PORT}"
    command: python server.py
    networks:
      - mainnet

  coturn:
    image: instrumentisto/coturn
    container_name: coturn
    restart: always
    ports:
      - "3478:3478/udp"            # STUN/TURN discovery
      - "5349:5349/tcp"            # TURN over TLS (fallback)
    command: >
      --no-cli
      --lt-cred-mech
      --user user:pass
      --realm webrtc.local
      --external-ip=${EXTERNAL_IP}
      --no-tls
      --no-dtls
      --log-file=stdout
    networks:
      - mainnet

  database:
    image: postgres:13
    container_name: database
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    expose:
      - ${POSTGRES_PORT}
    networks:
      - mainnet
  
  storage:
    image: minio/minio
    container_name: storage
    ports:
      - "9000:9000"
      - "9001:9001"
    expose:
      - ${S3_PORT}
    environment:
      - MINIO_ROOT_USER=${S3_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_SECRET_KEY}
    volumes:
      - storage:/data
    command: server /data --console-address ":9001" 
    networks:
      - mainnet

volumes:
  storage:
  postgres_data:
  panopticon_static:


networks:
  mainnet:
    driver: bridge
